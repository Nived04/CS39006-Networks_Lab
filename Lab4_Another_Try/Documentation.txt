Assignment 4 Emulating End-to-End Reliable Flow Control over Unreliable Communication Channels

1. DATA STRUCTURES

Message-Related Structures

 ----------------------------------------------------------------------------------------------------------------------------------------- 
| STRUCTURE      | DESCRIPTION                                     | FIELDS                       | PURPOSE                               |   
|----------------|-------------------------------------------------|------------------------------|---------------------------------------|
| data_message   | Contains the actual payload data                | - data[MAX_MESSAGE_SIZE - 8] | Array for storing payload data        |
|----------------|-------------------------------------------------|------------------------------|---------------------------------------|
| ack_message    | Contains acknowledgment information             | - expected_seq_num           | Expected sequence number              |
|                |                                                 | - rwnd                       | Receiver window size                  |
|----------------|-------------------------------------------------|------------------------------|---------------------------------------|
| message        | Encapsulates a message (data or ack)            | - type                       | Message type (0 for ACK, 1 for DATA)  |
|                |                                                 | - seq_num                    | Sequence number of the message        | 
|                |                                                 | - content                    | Union of data_message or ack_message  |
 -----------------------------------------------------------------------------------------------------------------------------------------

Buffer Management Structures

 ------------------------------------------------------------------------------------------------------------------------------------
| STRUCTURE         | DESCRIPTION                                     | FIELDS         | PURPOSE                                     |
|-------------------|-------------------------------------------------|----------------|---------------------------------------------|
| sending_buffer    | Manages outgoing messages                       | - last_seq     | Last used sequence number                   |
|                   |                                                 | - slot_empty[] | Indicates if buffer slot is empty           |   
|                   |                                                 | - buffer[]     | Array of messages                           |
|                   |                                                 | - timeout[]    | Timeout values for each slot                |
|-------------------|-------------------------------------------------|----------------|---------------------------------------------|
| receiving_buffer  | Manages incoming messages                       | - last_seq     | Last seen sequence number                   |
|                   |                                                 | - received[]   | Indicates if message is received            |
|                   |                                                 | - buffer[]     | Array of messages                           |
|-------------------|-------------------------------------------------|----------------|---------------------------------------------|
| buffer            | Common buffer structure for sending/receiving   | - base         | Base index of the sliding window            |
|                   |                                                 | - window_size  | Current window size                         |
|                   |                                                 | - last_ack     | Last acknowledged sequence number           |
|                   |                                                 | - sequence[]   | Array of expected sequence numbers          |
|                   |                                                 | - buff         | Union of sending_buffer or receiving_buffer |
 ------------------------------------------------------------------------------------------------------------------------------------

Socket Structure to represent a socket for the KTP Protocol: ktp_socket

 ----------------------------------------------------
| Fields      | PURPOSE                              |
| ------------|--------------------------------------|
| - lock      | Mutex for protecting parallel access |  
| - isAlloted | Whether socket is allocated          |
| - isBound   | Whether socket is bound              |
| - nospace   | Indicates if buffer is full          |
| - sockfd    | Underlying UDP socket descriptor     |
| - pid       | Process ID that owns the socket      | 
| - peer_addr | Destination address                  |
| - self_addr | Source address                       |
| - s_buff    | Sending buffer                       |
| - r_buff    | Receiving buffer                     |
 ----------------------------------------------------

2. FUNCTIONS IN ksocket.c

 -----------------------------------------------------------------------------------------------
| FUNCTION                 | DESCRIPTION                                                        |
|--------------------------|--------------------------------------------------------------------|
| attach_ktp_socket()      | Attaches to the shared memory segment containing socket structures |
| get_socket_num()         | Finds an available socket slot in the shared memory                |
| init_sending_buffer()    | Initializes the sending buffer with default values                 |
| init_receiving_buffer()  | Initializes the receiving buffer with default values               |
| dropMessage()            | Probabilistically decides whether to drop a message (for testing)  |
|--------------------------|--------------------------------------------------------------------|
| k_socket()               | Creates a new KTP socket                                           |
| k_bind()                 | Binds a KTP socket to source and destination addresses             |
| k_sendto()               | Sends data through a KTP socket                                    |
| k_recvfrom()             | Receives data from a KTP socket                                    |
| k_close()                | Closes a KTP socket                                                |
 -----------------------------------------------------------------------------------------------

3. FUNCTIONS IN initksocket.c

 -------------------------------------------------------------------------------------------------
| FUNCTION                   | DESCRIPTION                                                        |
|----------------------------|--------------------------------------------------------------------|
| init_socket_sm()           | Initializes shared memory for KTP sockets                          |
| send_ack()                 | Sends an acknowledgment message                                    |
| cleanup()                  | Cleans up resources when program terminates                        |
| receiver_thread()          | Thread that handles incoming messages                              |
|                            | -> Processes DATA messages                                         |
|                            | -> Processes ACK messages                                          |
|                            | -> Manages socket binding                                          |
| sender_thread()            | Thread that handles outgoing messages                              |
|                            | -> Retransmits timed-out messages                                  |
|                            | -> Sends new messages                                              |
| garbage_collector_thread() | Thread that cleans up resources of terminated processes            |
| main()                     | Entry point that initializes and starts threads                    |
 -------------------------------------------------------------------------------------------------

4. CODE USAGE:
- Create the library (generating libksocket.a)  : command "make library"
- Create the executable to run initksocket.c    : command "make init"
- Create the executable for the user codes      : command "make user"
- Run the initksocket executable first          : command "make runinit"
- Run the user codes (change number of pairs of user in the makefile for loop): command "make runuser"
- Delete the generated files and the library    : command "make clean"

5. PROTOCOL DETAILS

My high-level approach to the given assignment:
- The user1 and user2 codes provide the application interface, 
  which simulates file transfer over the internet

- To facilitate a reliable file transfer (or any data transfer for that matter), 
  the application makes use of a custom protocol (the KTP).

- The KTP protocol interface, namely the kscocket and its functionality, 
  is merely an interface that enables customising of flow control 
  with the use of sliding window.

- Under the hood, KTP uses the UDP sockets. 
  So, the Ksocket.c code is an interface that manages the ksockets 
  that are provided to the applications. 

- The sending and receiving of messages occurs with the use of UDP sockets, which make use
  of the data stored in the ksockets, along with other parameters required for reliability.

- The management of reliable transfer is the joint responsibility of 
  the running threads (which actually use the UDP sockets) and the ksocket library.

OVERVIEW

The KTP is a reliable transport protocol implemented on top of UDP that provides:
- Reliable message delivery with acknowledgments
- Flow control using sliding window
- In-order message delivery
- Message retransmission on timeout

Sliding Window Implementation:
- Uses a sender window and receiver window to control flow
- Window size is dynamic based on available buffer space
- ACKs contain receiver window size for flow control
- Sequence numbers are used to ensure in-order delivery

Lost-Packet Handling:
- Timeout-based retransmission for lost packets
- Duplicate packet detection and handling
- Out-of-order packet buffering
- Selective acknowledgment (acknowledges continuously received packets)

Shared Memory Architecture:
- Sockets are stored in shared memory for IPC
- Multiple processes can access the same socket structure
- Ksockets protected from parallel access with mutex-locks

6. PACKET STATISTICS

File Size: 107.2 KB
No. of messages generated: ceil(107159/504) = 213 data messages + 1 additional custom "finished-marker" = 214 data packets
Timeout: 5 seconds

┌──────────────────────┬────────────────────────────┬────────────────────────────────────────────────────┐
│ Drop probability (p) │ No. of DATA transmissions  │ Avg no. of transmissions made to send each message │
├──────────────────────┼────────────────────────────┼────────────────────────────────────────────────────┤
│ 0.00                 │ 214                        │ 1.000                                              |
│ 0.05                 │ 264                        │ 1.233                                              |
│ 0.10                 │ 311                        │ 1.453                                              |
│ 0.15                 │ 392                        │ 1.832                                              |
│ 0.20                 │ 427                        │ 1.995                                              |
│ 0.25                 │ 480                        │ 2.243                                              |
│ 0.30                 │ 534                        │ 2.495                                              |
│ 0.35                 │ 611                        │ 2.855                                              |
│ 0.40                 │ 703                        │ 3.285                                              |
│ 0.45                 │ 775                        │ 3.621                                              |
│ 0.50                 │ 831                        │ 3.883                                              |
└──────────────────────┴────────────────────────────┴────────────────────────────────────────────────────┘